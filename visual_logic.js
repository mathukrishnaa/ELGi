/**
 * Generated by Verge3D Puzzles v.3.9.1
 * Thu Apr 04 2024 17:02:51 GMT+0530 (India Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["drag"] = drag;

var PROC = {
    "drag": drag,
};

var b, c, m, a;



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId, isParent) {

    var win = isParent ? window.parent : window;

    var elem = win.document.createElement(elemType);
    if (id !== '')
        elem.id = id;

    var targetElem = getElement(targetId, isParent);
    if (targetElem instanceof win.Element) {
        switch (mode) {
            case 'TO':
                targetElem.appendChild(elem);
                break;
            case 'BEFORE':
                targetElem.insertAdjacentElement('beforebegin', elem);
                break;
            case 'AFTER':
                targetElem.insertAdjacentElement('afterend', elem);
                break;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}



// cloneObject puzzle
function cloneObject(objName) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var newObj = obj.clone();
    newObj.name = findUniqueObjectName(obj.name);
    appInstance.scene.add(newObj);
    return newObj.name;
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// setObjTransform puzzle
function setObjTransform(objSelector, isWorldSpace, mode, vector, offset){
    var x = vector[0];
      var y = vector[1];
      var z = vector[2];

    var objNames = retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (isWorldSpace && obj.parent) {
            obj.matrixWorld.decomposeE(obj.position, obj.rotation, obj.scale);

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

            obj.matrixWorld.composeE(obj.position, obj.rotation, obj.scale);
            obj.matrix.multiplyMatrices(_pGlob.mat4Tmp.copy(obj.parent.matrixWorld).invert(), obj.matrixWorld);
            obj.matrix.decompose(obj.position, obj.quaternion, obj.scale);

        } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {
            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



function intersectPlaneCSS(plane, cssX, cssY, dest) {
    var coords = _pGlob.vec2Tmp;
    var rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.getCamera(true));
    return rc.ray.intersectPlane(plane, dest);
}



// dragMove puzzle
_pGlob.dragMoveOrigins = {};

function dragMove(objSelector, mode, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera();
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    var posOrigins = _pGlob.dragMoveOrigins[blockId];
    var lenDiff = objNames.length - posOrigins.length;
    for (var i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        var posOrigin = posOrigins[i];

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        var coordSystem = getCoordSystem();

        if (mode == "X" || mode == "Y" || mode == "Z") {

            if (coordSystem == 'Z_UP_RIGHT') {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            } else {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");
            }

            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            planeNor.cross(axis).cross(axis);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == "XY" || mode == "XZ" || mode == "YZ") {
            if (coordSystem == 'Z_UP_RIGHT') {
                var normal = mode == "XY" ? _pGlob.AXIS_Y : (mode == "XZ" ? _pGlob.AXIS_Z : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "z" : (mode == "XZ" ? "y" : "z");
            } else {
                var normal = mode == "XY" ? _pGlob.AXIS_Z : (mode == "XZ" ? _pGlob.AXIS_Y : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "y" : (mode == "XZ" ? "z" : "z");
            }

            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == "XYZ") {
            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}



function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}



/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}



function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}



// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el.objName], objName)) {
                el.callback({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);



// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            elem.removeEventListener('mousemove', moveCb);
            elem.removeEventListener('touchmove', moveCb);
            elem.removeEventListener('mouseup', upCb);
            elem.removeEventListener('touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener('mousemove', moveCb);
        elem.addEventListener('touchmove', moveCb);
        elem.addEventListener('mouseup', upCb);
        elem.addEventListener('touchend', upCb);
    }

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}



/**
 * Find physics body associated with the given object and remove it.
 */
function _pFindRemovePhysicsBody(obj) {

    for (var i = 0; i < _pGlob.syncList.length; i++) {
        var syncData = _pGlob.syncList[i];

        if (syncData.obj == obj) {

            if (syncData.type == 'SOFT_BODY')
                _pGlob.world.removeSoftBody(syncData.body);
            else
                _pGlob.world.removeRigidBody(syncData.body);

            Ammo.destroy(syncData.body);
            _pGlob.syncList.splice(i, 1);
            i--;
        }
    }
}

/**
 * Find physics constraint associated with the given objects and remove it.
 */
function _pFindRemovePhysicsConstraint(obj1, obj2) {

    for (var i = 0; i < _pGlob.consList.length; i++) {

        var consData = _pGlob.consList[i];

        if (consData.obj1 == obj1 && consData.obj2 == obj2) {

            _pGlob.world.removeConstraint(consData.cons);
            Ammo.destroy(consData.cons);
            _pGlob.consList.splice(i, 1);
            i--;

        }

    }

}

/**
 * Cleanup forces and velocities
 */
function _pResetBody(body) {
    body.clearForces();

    var zeroVec = new Ammo.btVector3(0, 0, 0);

    body.setLinearVelocity(zeroVec);
    body.setAngularVelocity(zeroVec);
}

function _pSetObjToBodyTransform (obj, body) {
    var pos = obj.getWorldPosition(_pGlob.vec3Tmp);
    var quat = obj.getWorldQuaternion(_pGlob.quatTmp);

    _pGlob.transTmp.setIdentity();
    _pGlob.transTmp.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
    _pGlob.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

    body.setWorldTransform(_pGlob.transTmp);
    body.getMotionState().setWorldTransform(_pGlob.transTmp);
}



// createPhysicsBody puzzle
function createPhysicsBody(type, objSelector, shape, mass) {

    if (!window.Ammo || !_pGlob.world)
        return;

    var objNames = retrieveObjectNames(objSelector);

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        _pFindRemovePhysicsBody(obj);

        switch (shape) {
        case 'BOX':
        case 'CAPSULE':
        case 'CONE':
        case 'CYLINDER':

            var box = new v3d.Box3();

            obj.resolveMultiMaterial().forEach(function(objR) {
                if (objR.geometry) {
                    if (objR.geometry.boundingBox == null)
                        objR.geometry.computeBoundingBox();

                    box.union(objR.geometry.boundingBox);
                }
            });

            var size = box.getSize(new v3d.Vector3());

            // do not allow empty-sized shapes
            size.x = size.x || 0.5;
            size.y = size.y || 0.5;
            size.z = size.z || 0.5;

            if (shape == 'BOX') {
                var geometry = new Ammo.btBoxShape(new Ammo.btVector3(
                        size.x * 0.5, size.y * 0.5, size.z * 0.5));
            } else if (shape == 'CAPSULE') {
                var radius = Math.max(size.x, size.z) * 0.5;
                var height = size.y - 2 * radius;
                var geometry = new Ammo.btCapsuleShape(radius, height);
            } else if (shape == 'CONE') {
                var radius = Math.max(size.x, size.z) * 0.5;
                var height = size.y;
                var geometry = new Ammo.btConeShape(radius, height);
            } else {
                var geometry = new Ammo.btCylinderShape(new Ammo.btVector3(
                        size.x * 0.5, size.y * 0.5, size.z * 0.5));
            }

            break;
        case 'SPHERE':

            var sphere = new v3d.Sphere();

            obj.resolveMultiMaterial().forEach(function(objR) {

                if (objR.geometry) {
                    if (objR.geometry.boundingSphere === null)
                        objR.geometry.computeBoundingSphere();

                    sphere.union(objR.geometry.boundingSphere);
                }
            });

            var geometry = new Ammo.btSphereShape(sphere.radius || 0.5);

            break;
        case 'MESH':

            var objsR = obj.resolveMultiMaterial();

            if (!objsR[0].geometry || !objsR[0].isMesh) {
                console.error('create rigid body: incorrect mesh object');
                var geometry = new Ammo.btEmptyShape();
                break;
            }

            // allow complex triangle shapes for KINEMATIC objects
            if (type == 'DYNAMIC' || type == 'GHOST') {

                var geometry = new Ammo.btConvexHullShape();

                objsR.forEach(function(objR) {
                    var positions = objR.geometry.attributes.position.array;

                    for (var i = 0; i < positions.length; i+=3) {
                        var x = positions[i];
                        var y = positions[i+1];
                        var z = positions[i+2];

                        var v = new Ammo.btVector3(x, y, z);

                        geometry.addPoint(v);

                        Ammo.destroy(v);
                    }
                });

            } else {

                var triIdxVertArray = new Ammo.btTriangleMesh();

                objsR.forEach(function(objR) {
                    var positions = objR.geometry.attributes.position.array;
                    var indices = objR.geometry.index.array;

                    for (var i = 0; i < indices.length; i+=3) {

                        var i1 = indices[i];
                        var i2 = indices[i+1];
                        var i3 = indices[i+2];

                        var v1 = new Ammo.btVector3(positions[3*i1], positions[3*i1+1], positions[3*i1+2]);
                        var v2 = new Ammo.btVector3(positions[3*i2], positions[3*i2+1], positions[3*i2+2]);
                        var v3 = new Ammo.btVector3(positions[3*i3], positions[3*i3+1], positions[3*i3+2]);

                        triIdxVertArray.addTriangle(v1, v2, v3, false);

                        Ammo.destroy(v1);
                        Ammo.destroy(v2);
                        Ammo.destroy(v3);
                    }
                });

                var geometry = new Ammo.btBvhTriangleMeshShape(triIdxVertArray, true);

            }

            break;
        case 'EMPTY':
            var geometry = new Ammo.btEmptyShape();
            break;
        }

        var pos = obj.getWorldPosition(_pGlob.vec3Tmp);
        var quat = obj.getWorldQuaternion(_pGlob.quatTmp);

        var transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        var motionState = new Ammo.btDefaultMotionState(transform);

        if (type == 'STATIC' || type == 'KINEMATIC' || type == 'GHOST')
            var bodyMass = 0;
        else
            var bodyMass = mass;

        var localInertia = new Ammo.btVector3(0, 0, 0);
        geometry.calculateLocalInertia(bodyMass, localInertia);

        var rbInfo = new Ammo.btRigidBodyConstructionInfo(bodyMass, motionState, geometry, localInertia);
        var body = new Ammo.btRigidBody(rbInfo);

        // CF_STATIC_OBJECT is set automatically

        if (type == 'KINEMATIC' || type == 'GHOST') {
            body.setCollisionFlags(body.getCollisionFlags() | CF_KINEMATIC_OBJECT);
            body.setActivationState(DISABLE_DEACTIVATION);
        }

        if (type == 'GHOST') {

            body.setCollisionFlags(body.getCollisionFlags() | CF_NO_CONTACT_RESPONSE);
            _pGlob.world.addRigidBody(body, SensorTrigger, AllFilter);

        } else {

            _pGlob.world.addRigidBody(body);

        }


        //body.setDamping(0.1, 0.1);

        _pGlob.syncList.push({
            obj: obj,
            body: body,
            type: type,
            simulated: true,
            mass: mass
        });

        // external physics interface
        if (v3d.PL) {
            v3d.PL.physics.bodies[objName] = body;
        }
    });


}


// Describe this function...
function drag(a) {
  registerOnDrag(a, false, [0,1,2], function() {}, function() {
    dragMove(a, 'XYZ', '4[SbHz%7/J%;?Xt|+F[#', 'swC`[*W61}cTe4;w8Spj');
  }, function() {}, 'swC`[*W61}cTe4;w8Spj');
}


changeVis('Rect block', false);
changeVis('Square block', false);
changeVis('Two stud', false);
addHTMLElement('button', 'd1', 'TO', ['CONTAINER'], true);
setHTMLElemStyle('backgroundColor', 'blue', 'd1', true);
setHTMLElemStyle('borderRight', '2px', 'd1', true);
setHTMLElemStyle('height', '60px', 'd1', true);
setHTMLElemStyle('width', '60px', 'd1', true);
eventHTMLElem('click', 'd1', true, function(event) {
  a = cloneObject('Rect block');
  c = (typeof c == 'number' ? c : 0) + 2;
  setObjTransform(a, false, 'position', [14.6852, 10.2227, c], false);
  changeVis('Rect block', true);
  drag(a);
});
addHTMLElement('button', 'd3', 'TO', ['CONTAINER'], true);
setHTMLElemStyle('backgroundColor', 'red', 'd3', false);
setHTMLElemStyle('height', '60px', 'd3', false);
setHTMLElemStyle('width', '60px', 'd3', false);
eventHTMLElem('click', 'd3', false, function(event) {
  a = cloneObject('Square block');
  b = (typeof b == 'number' ? b : 0) + 2;
  setObjTransform(a, false, 'position', [14.6852, 3.98258, b], false);
  changeVis('Square block', true);
  drag(a);
});
addHTMLElement('button', 'd2', 'TO', ['CONTAINER'], true);
setHTMLElemStyle('backgroundColor', 'yellow', 'd2', true);
setHTMLElemStyle('height', '60px', 'd2', true);
setHTMLElemStyle('width', '60px', 'd2', true);
eventHTMLElem('click', 'd2', true, function(event) {
  a = cloneObject('Two stud');
  m = (typeof m == 'number' ? m : 0) + 2;
  setObjTransform(a, false, 'position', [14.6852, -2.48864, m], false);
  changeVis('Two stud', true);
  drag(a);
});
registerOnDrag('Two stud', false, [0,1,2], function() {}, function() {
  dragMove('Two stud', 'XYZ', 'fRHfBZ9W?7rl~!Y(5#z.', 'iixarJ4[UI6-3es|luw@');
}, function() {}, 'iixarJ4[UI6-3es|luw@');
registerOnDrag('Square block', false, [0,1,2], function() {}, function() {
  dragMove('Square block', 'XYZ', 'D`8n_{UVN$mKGMCaBr0T', '*9)-]OZLU21+?((a)+u.');
}, function() {}, '*9)-]OZLU21+?((a)+u.');
registerOnDrag('Rect block', false, [0,1,2], function() {}, function() {
  dragMove('Rect block', 'XYZ', '(n+:+$lNWjy|9v~Ix/?=', '4vW5|2@5Iz-{(_}k-M;P');
}, function() {}, '4vW5|2@5Iz-{(_}k-M;P');
createPhysicsBody('STATIC', 'Cube.001', 'MESH', 0);
registerOnDrag('<none>', false, [0,1,2], function() {}, function() {}, function() {}, 'g^;q3J@R.?;^WhOGRq6}');


// createPhysicsWorld puzzle

// TEMPORARY MEASURE TO PREVENT CRASH [TODO]
if (window.Ammo) {

var CF_STATIC_OBJECT = 1;
var CF_KINEMATIC_OBJECT = 2;
var CF_NO_CONTACT_RESPONSE = 4;

var ACTIVE_TAG = 1;
var ISLAND_SLEEPING = 2;
var DISABLE_DEACTIVATION = 4;
var DISABLE_SIMULATION = 5;

var RO_XYZ = 0;

// collision filter groups
var DefaultFilter = 1;
var StaticFilter = 2;
var KinematicFilter = 4;
var DebrisFilter = 8;
var SensorTrigger = 16;
var CharacterFilter = 32;
var AllFilter = -1;

if (true) {

    _pGlob.collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration();
    _pGlob.dispatcher = new Ammo.btCollisionDispatcher(_pGlob.collisionConfiguration);
    _pGlob.broadphase = new Ammo.btDbvtBroadphase();
    _pGlob.solver = new Ammo.btSequentialImpulseConstraintSolver();
    _pGlob.softBodySolver = new Ammo.btDefaultSoftBodySolver();
    _pGlob.world = new Ammo.btSoftRigidDynamicsWorld(_pGlob.dispatcher, _pGlob.broadphase,
            _pGlob.solver, _pGlob.collisionConfiguration, _pGlob.softBodySolver);
    _pGlob.world.getWorldInfo().set_m_gravity(new Ammo.btVector3(0, -9.8, 0));

    _pGlob.softBodyHelpers = new Ammo.btSoftBodyHelpers();

} else {

    _pGlob.collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
    _pGlob.dispatcher = new Ammo.btCollisionDispatcher(_pGlob.collisionConfiguration);
    _pGlob.broadphase = new Ammo.btDbvtBroadphase();
    _pGlob.solver = new Ammo.btSequentialImpulseConstraintSolver();
    _pGlob.world = new Ammo.btDiscreteDynamicsWorld(_pGlob.dispatcher, _pGlob.broadphase,
            _pGlob.solver, _pGlob.collisionConfiguration);

}

_pGlob.syncList = [];
_pGlob.consList = [];

// internal info
_pGlob.collisionData = [];

// goes to collision callback
_pGlob.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

_pGlob.fps = 120;
_pGlob.transTmp = new Ammo.btTransform();
_pGlob.transTmp2 = new Ammo.btTransform();

_pGlob.world.setGravity( new Ammo.btVector3( 0, -9.8, 0 ) );

// external physics interface
if (v3d.PL) {
    v3d.PL.physics = v3d.PL.physics || {};
    v3d.PL.physics.world = _pGlob.world;
    v3d.PL.physics.bodies = {};
    v3d.PL.physics.constraints = {};
    v3d.PL.physics.addToSyncList = function(obj, body, type) {
        _pGlob.syncList.push({
            obj: obj,
            body: body,
            type: type,
            simulated: true,
            mass: (body.getInvMass() !==0) ? 1.0/body.getInvMass() : 0
        });
        v3d.PL.physics.bodies[obj.name] = body;
    }
    v3d.PL.physics.removeFromSyncList = function(obj, body) {
        _pFindRemovePhysicsBody(obj);
        delete v3d.PL.physics.bodies[obj.name];
    }
}

function tick(dt) {

    var DISTANCE_EPSILON = 0.000001;

    if (_pGlob.collisionData.length) {

        var numManifolds = _pGlob.world.getDispatcher().getNumManifolds();

        for (var i = 0; i < numManifolds; i++) {
            var contactManifold = _pGlob.world.getDispatcher().getManifoldByIndexInternal(i);

            var bodyA = Ammo.castObject(contactManifold.getBody0(), Ammo.btRigidBody);
            var bodyB = Ammo.castObject(contactManifold.getBody1(), Ammo.btRigidBody);

            var collDataMatch = null;
            var objsSwapped = false;

            for (var j = 0; j < _pGlob.collisionData.length; j++) {
                var cd = _pGlob.collisionData[j];

                if (cd.bodyA == bodyA && cd.bodyB == bodyB) {
                    collDataMatch = cd;
                    break;
                }

                if (cd.bodyA == bodyB && cd.bodyB == bodyA) {
                    collDataMatch = cd;
                    objsSwapped = true;
                    break;
                }
            }

            if (!collDataMatch)
                continue;

            var numContacts = contactManifold.getNumContacts();

            for (var j = 0; j < numContacts; j++) {
                var pt = contactManifold.getContactPoint(j);

                if (pt.getDistance() < DISTANCE_EPSILON) {
                    var ptA = pt.getPositionWorldOnA();
                    var ptB = pt.getPositionWorldOnB();
                    var noB = pt.get_m_normalWorldOnB();

                    _pGlob.collisionInfo.objectA = collDataMatch.objA ? getPickedObjectName(collDataMatch.objA) : '';
                    _pGlob.collisionInfo.objectB = collDataMatch.objB ? getPickedObjectName(collDataMatch.objB) : '';

                    _pGlob.collisionInfo.distance = pt.getDistance();

                    if (!objsSwapped) {
                        _pGlob.collisionInfo.positionOnA[0] = ptA.x();
                        _pGlob.collisionInfo.positionOnA[1] = ptA.y();
                        _pGlob.collisionInfo.positionOnA[2] = ptA.z();

                        _pGlob.collisionInfo.positionOnB[0] = ptB.x();
                        _pGlob.collisionInfo.positionOnB[1] = ptB.y();
                        _pGlob.collisionInfo.positionOnB[2] = ptB.z();

                        _pGlob.collisionInfo.normalOnB[0] = noB.x();
                        _pGlob.collisionInfo.normalOnB[1] = noB.y();
                        _pGlob.collisionInfo.normalOnB[2] = noB.z();
                    } else {
                        _pGlob.collisionInfo.positionOnA[0] = ptB.x();
                        _pGlob.collisionInfo.positionOnA[1] = ptB.y();
                        _pGlob.collisionInfo.positionOnA[2] = ptB.z();

                        _pGlob.collisionInfo.positionOnB[0] = ptA.x();
                        _pGlob.collisionInfo.positionOnB[1] = ptA.y();
                        _pGlob.collisionInfo.positionOnB[2] = ptA.z();

                        _pGlob.collisionInfo.normalOnB[0] = -noB.x();
                        _pGlob.collisionInfo.normalOnB[1] = -noB.y();
                        _pGlob.collisionInfo.normalOnB[2] = -noB.z();
                    }

                    collDataMatch.collideCb();

                    // mark as collided all collision data from the same exec instance
                    for (var k = 0; k < _pGlob.collisionData.length; k++) {
                        var cd = _pGlob.collisionData[k];
                        if (cd.execInstanceID == collDataMatch.execInstanceID) {
                            cd.collideFlag = true;
                        }
                    }
                }
            }
        }

        for (var i = 0; i < _pGlob.collisionData.length; i++) {
            var cd = _pGlob.collisionData[i];

            if (!cd.collideFlag) {
                _pGlob.collisionInfo.objectA = '';
                _pGlob.collisionInfo.objectB = '';

                _pGlob.collisionInfo.distance = 0;

                _pGlob.collisionInfo.positionOnA[0] = 0;
                _pGlob.collisionInfo.positionOnA[1] = 0;
                _pGlob.collisionInfo.positionOnA[2] = 0;

                _pGlob.collisionInfo.positionOnB[0] = 0;
                _pGlob.collisionInfo.positionOnB[1] = 0;
                _pGlob.collisionInfo.positionOnB[2] = 0;

                _pGlob.collisionInfo.normalOnB[0] = 0;
                _pGlob.collisionInfo.normalOnB[1] = 0;
                _pGlob.collisionInfo.normalOnB[2] = 0;

                cd.noCollideCb();

                // no need to process other collision data from the same exec instance
                for (var j = i+1; j < _pGlob.collisionData.length; j++) {
                    var cdj = _pGlob.collisionData[j];
                    if (cdj.execInstanceID == cd.execInstanceID) {
                        cdj.collideFlag = true;
                    }
                }
            }

            cd.collideFlag = false;
        }
    }

    _pGlob.world.stepSimulation(dt, 10, 1/120);

    // sync physics and graphics

    for (var i = 0; i < _pGlob.syncList.length; i++) {
        var syncData = _pGlob.syncList[i];
        if (!syncData.simulated)
            continue;

        var body = syncData.body;

        if (syncData.type == 'SOFT_BODY') {

            var geometry = syncData.obj.geometry;
            var volumePositions = geometry.attributes.position.array;
            var volumeNormals = geometry.ammoNeedNormals ? geometry.attributes.normal.array : null;

            var association = geometry.ammoIndexAssociation;
            var numVerts = association.length;
            var nodes = body.get_m_nodes();

            for (var j = 0; j < numVerts; j++) {

                var node = nodes.at(j);

                var nodePos = node.get_m_x();
                var x = nodePos.x();
                var y = nodePos.y();
                var z = nodePos.z();

                if (volumeNormals) {
                    var nodeNormal = node.get_m_n();
                    var nx = nodeNormal.x();
                    var ny = nodeNormal.y();
                    var nz = nodeNormal.z();
                }

                var assocVertex = association[j];

                for (var k = 0, kl = assocVertex.length; k < kl; k++) {

                    var indexVertex = assocVertex[k];
                    volumePositions[indexVertex] = x;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = nx;

                    indexVertex++;
                    volumePositions[indexVertex] = y;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = ny;

                    indexVertex++;
                    volumePositions[indexVertex] = z;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = nz;

                }

            }

            geometry.attributes.position.needsUpdate = true;
            if (volumeNormals)
                geometry.attributes.normal.needsUpdate = true;

            if (geometry.attributes.previous) {
                v3d.MeshLine.updateAttributes(geometry);
            }

        } else if (!body.isStaticOrKinematicObject()) {
            var ms = body.getMotionState();
            if (ms) {
                ms.getWorldTransform(_pGlob.transTmp);
                var p = _pGlob.transTmp.getOrigin();
                var q = _pGlob.transTmp.getRotation();
                // dynamic objects can't be parented to something
                syncData.obj.position.set(p.x(), p.y(), p.z());
                syncData.obj.quaternion.set(q.x(), q.y(), q.z(), q.w());
            }

        } else if (body.isKinematicObject()) {

            var pos = syncData.obj.getWorldPosition(_pGlob.vec3Tmp);
            var quat = syncData.obj.getWorldQuaternion(_pGlob.quatTmp);

            _pGlob.transTmp.setIdentity();
            _pGlob.transTmp.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
            _pGlob.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

            body.setWorldTransform(_pGlob.transTmp);

            // needed to calculate interpolated velocity
            body.getMotionState().setWorldTransform(_pGlob.transTmp);

        }
    }

}

appInstance.renderCallbacks.push(tick);
if (v3d.PL.editorRenderCallbacks)
    v3d.PL.editorRenderCallbacks.push([appInstance, tick]);

// END OF TEMPORARY MEASURE TO PREVENT CRASH [TODO]
}


b = 0;

c = 0;

m = 0;



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
